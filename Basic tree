#library




#split function
split <- function(X, y){
  
  #dataframe for storing sse of splitting points for each variable
  sse_full <- data.frame(X)[1,]
  
  #loop
  for (j in length(colnames(X))){
    X_split <- X[,j]
    splits <- sort(unique(X_split))
    sse <- c()
    for (i in seq_along(splits)){
      sp <- splits[j]
      sse[i] <- sum((y[X_split < sp, 1] - mean(y[X_split < sp,1])^2)) + 
        sum((y[X_split >= sp,1] - mean(y[X_split >= sp,1]))^2)
    }
    sse_full[1,j] <- min(sse)  
  }
  
  split_at_full <- splits[which.min(sse_full)]
  split_at_variable <- colnames(X)[which.min(sse_full)]
  return (c(variable = split_at_variable, sse = min(sse_full), split = split_at_full))
}

#while loop


tree <- function (X , y){
  
  tree_info <- data.frame(node = 1, nobs = nrow(data), status = "split", level = 1,  
                          splitpoint = 1, splitvariable = "Variable")
  
  k <- 0
  
  while (k <= maxdepth) {
    
    k <- k + 1
    
    for (i in length(which(tree_info$level == k))) {
      #selecting the node
      branch <- tree_info[which(tree_info$level == k),][i,]
      
      if (branch$nobs > minobs & branch$status == "split"){
        temp_result <- split(X, y)
        
        node <- branch$node
        nobs <- branch$nobs
        status <- "split"
        level <- k
        splitpoint <- temp_result[3] 
        splitvariable <- temp_result[1]
        
        new_branch <- c(node, nobs, status, level, splitpoint, splitvariable)
        
        #children branches
        if (length(which(X$splitvariable < splitpoint)) > nobs){
          c_status1 <- "split"
          c_nobs1 <- length(which(X$splitvariable < splitpoint))
          
        } else {
          c_status1 <- "leaf"
          c_nobs1 <- length(which(X$splitvariable < splitpoint))
        }
        
        if (length(which(X$splitvariable > splitpoint)) > nobs){
          c_nobs <- length(which(X$splitvariable > splitpoint))
          c_status2 <- "split"
          
        } else {
          c_nobs2 <- length(which(X$splitvariable > splitpoint))
          c_status2 <- "leaf"
        }
        
        children <- data.frame(node = c(2 * node, 2 * node + 1),
                               nobs = c(c_nobs1,c_nobs2), status = c(c_status1,c_status2),
                               level = c(k+1, k+1), splitpoint = c(NA, NA), splitvariable = c("NA","NA")
        )
        
        #overwrite state of current node
        tree_info[node, ] <- new_branch
        
        #bind everything
        tree_info <- rbind(tree_info, children)
        
        
      }else{
        node <- branch$node
        nobs <- branch$nobs
        status <- "leaf"
        level <- k
        splitpoint <- temp_result[3] 
        splitvariable <- temp_result[1]
        
        new_branch <- c(node, nobs, status, level, splitpoint, splitvariable)
        
        tree_info[node, ] <- new_branch
      }
      
    }
    
  }
  
}

#MAIN#
#initialization
maxdepth <- 3
minobs <- 50

X1 <- data.frame(rnorm(1000, 0, 1))
X1 <- cbind(X1, rgamma(1000, 2, 1))
X1 <- cbind(X1, runif(1000, 0, 3))
X<- X1
y <- data.frame(X + rnorm(1000, 1, 2))

tree(X,y)


#New
# Calculates which split is best according to the SSE criterion
sse_var <- function(x, y) {
  
  # get all possible splits
  splits <- sort(unique(x))
  
  # save here the SSE
  sse <- c()
  
  # go through all possible splits
  for (i in seq_along(splits)) {
    
    # get a split
    split <- splits[i]
    
    # get the dependent variable in in the possible split regions
    vY1 <- y[x < split]
    vY2 <- y[x >= split]
    
    # calculate sse 
    sse[i] <- sum((vY1 - mean(y[x < split]))^2) + sum((vY2  - mean(y[x >= split]))^2) 
  }
  # get where to split
  split_at <- splits[which.min(sse)]
  return(c(sse = min(sse), split = split_at))
}


RegressionTree <- function(formula, df, minObs, maxDepth) {
  
  # coerce to data.frame
  data <- as.data.frame(df)
  
  # handle formula
  formula <- terms.formula(formula)
  
  # get the independent variable matrix
  X <- model.matrix(formula, df)
  
  # get the dependent variable
  y <- df[, as.character(formula)[2]]
  
  # While TRUE, while loop continues 
  do_splits <- TRUE
  
  # Create output data.frame with splitting rules and observations
  # This dataframe also works to guide which next need to be taken
  tree_info <- data.frame(Node_id = 1,    
                          Variable = NA,  
                          Index = NA,     
                          Obs = nrow(df), 
                          Rule = NA,     
                          Status = "SPLIT", 
                          stringsAsFactors = FALSE)

  
  # keep splitting until there are only leafs left
  while(do_splits) {
    
    # Get indexes of which nodes need have to be splitted
    vIndex_split <- which(tree_info$Status == "SPLIT")

    # go through all to calculate
    for (j in vIndex_split) {
      
        # when not at the root node, select the subset based on the previous splits
        if (!is.na(tree_info[j, "Rule"])) {
          
          # subset data according to the rule
          this_data <- subset(df, eval(parse(text = tree_info[j, "Rule"])))

          # get the design matrix
          X <- model.matrix(formula, this_data)
        
        # in the first case, the split is over all the data
        } else {
          this_data <- df
        }
        
        # estimate splitting criteria
        splitting <- apply(X, MARGIN = 2, FUN = sse_var, y = y)
        
        # get the min SSE
        tmp_splitter <- which.min(splitting[1,])

        # define maxnode
        mn <- max(tree_info$Node_id)
        
        # paste rules for the upcoming split
        tmp_rule <- c(paste(names(tmp_splitter), ">=", splitting[2,tmp_splitter]),paste(names(tmp_splitter), "<", splitting[2,tmp_splitter]))
        
        # Check if the splitting rule has already been invoked to prevent appying the same rule twice
        split_here  <- !sapply(tmp_rule,
                               FUN = function(x,y) any(grepl(x, x = y)),
                               y = tree_info$Rule)
        
        # If empty, add the splitting rules
        if (!is.na(tree_info[j, "Rule"])) {
          tmp_rule  <- paste(tree_info[j, "Rule"], 
                               tmp_rule, sep = " & ")
        } 
        
        # get the number of observations in current node
        tmp_nobs <- sapply(tmp_rule,
                           FUN = function(i, x) {
                             nrow(subset(x = x, subset = eval(parse(text = i))))
                           },
                           x = this_data)  
        
        # insufficient minObs for split
        if (any(tmp_nobs <= minObs)) {
          split_here <- rep(FALSE, 2)
        }
        
        # create children data frame
        children <- data.frame(Node_id = c(mn+1, mn+2),
                               Variable =names(tmp_splitter),
                               Index = splitting[2,tmp_splitter],
                               Obs = tmp_nobs,
                               Rule = tmp_rule,
                               Status = rep("SPLIT", 2),
                               row.names = NULL)[split_here,]
        
        # overwrite state of current node
        tree_info[j, "Status"] <- ifelse(all(!split_here), "LEAF", "PARENT")
        
        # bind everything
        tree_info <- rbind(tree_info, children)
        
        # check if there are any open splits left
        do_splits <- !all(tree_info$Status != "SPLIT")
        
        # check if at max depth
        k <- length(unique(tree_info$Index))-1
        
        # if no splits left, stop
        if(all(tree_info$Status != "SPLIT")){
          
          do_splits <- FALSE
        
        # also stop if max depth reached
        }else if(k>=maxDepth){
          
          do_splits <- FALSE
          
        }
      } 
  }
  
  # calculate fitted values
  leafs <- tree_info[tree_info$Status == "LEAF", ]
  fitted <- c()
  for (i in seq_len(nrow(leafs))) {
    # extract index
    ind <- as.numeric(rownames(subset(df, eval(parse(text = leafs[i, "Rule"])))))
    # estimator is the mean y value of the leaf
    fitted[ind] <- mean(y[ind])
  }
  
  # return everything
  return(list(tree = tree_info, fit = fitted, formula = formula, data = data))
}


test_tree <- RegressionTree(cigs ~  age + educ, df = Smoke, minObs = 10, maxDepth = 5)
test_tree$tree
